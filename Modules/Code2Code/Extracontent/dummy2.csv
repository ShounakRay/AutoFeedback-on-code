,input,target
0,"def __init__(self, field):
		self.field = field","def __set__(self, instance, value):
		instance.__dict__[self.field.name] = value
		setattr(instance, self.field.attname, json.dumps(value))"
1,"def __init__(self, field):
		self.field = field","def __get__(self, instance, owner):
		if instance is None:
			raise AttributeError # ?"
2,"def __init__(self, field):
		self.field = field","def upload(
    src,
    requirements=None,
    local_package=None,
    config_file=""config.yaml"",
    profile_name=None,"
3,"def __init__(self, field):
		self.field = field","def get_callable_handler_function(src, handler):
    """"""Translate a string of the form ""module.function"" into a callable
    function.

    :param str src:
      The path to your Lambda project containing a valid handler file.
    :param str handler:
      A dot delimited string representing the `<module>.<function name>`.
    """"""

    # ""cd"" into `src` directory.
    os.chdir(src)

    module_name, function_name = handler.split(""."")
    filename = get_handler_filename(handler)

    path_to_module_file = os.path.join(src, filename)
    module = load_source(module_name, path_to_module_file)
    return getattr(module, function_name)"
4,"def __init__(self, allow=None, disallow=None, secure=True, *args, **kwargs):
		super(TemplateField, self).__init__(*args, **kwargs)
		self.validators.append(TemplateValidator(allow, disallow, secure))","def __set__(self, instance, value):
		instance.__dict__[self.field.name] = value
		setattr(instance, self.field.attname, json.dumps(value))"
5,"def __init__(self, allow=None, disallow=None, secure=True, *args, **kwargs):
		super(TemplateField, self).__init__(*args, **kwargs)
		self.validators.append(TemplateValidator(allow, disallow, secure))","def __get__(self, instance, owner):
		if instance is None:
			raise AttributeError # ?"
6,"def __init__(self, allow=None, disallow=None, secure=True, *args, **kwargs):
		super(TemplateField, self).__init__(*args, **kwargs)
		self.validators.append(TemplateValidator(allow, disallow, secure))","def upload(
    src,
    requirements=None,
    local_package=None,
    config_file=""config.yaml"",
    profile_name=None,"
7,"def __init__(self, allow=None, disallow=None, secure=True, *args, **kwargs):
		super(TemplateField, self).__init__(*args, **kwargs)
		self.validators.append(TemplateValidator(allow, disallow, secure))","def get_callable_handler_function(src, handler):
    """"""Translate a string of the form ""module.function"" into a callable
    function.

    :param str src:
      The path to your Lambda project containing a valid handler file.
    :param str handler:
      A dot delimited string representing the `<module>.<function name>`.
    """"""

    # ""cd"" into `src` directory.
    os.chdir(src)

    module_name, function_name = handler.split(""."")
    filename = get_handler_filename(handler)

    path_to_module_file = os.path.join(src, filename)
    module = load_source(module_name, path_to_module_file)
    return getattr(module, function_name)"
8,"def init(src, minimal=False):
    """"""Copies template files to a given directory.

    :param str src:
        The path to output the template lambda project files.
    :param bool minimal:
        Minimal possible template files (excludes event.json).
    """"""

    templates_path = os.path.join(
        os.path.dirname(os.path.abspath(__file__)), ""project_templates"",
    )
    for filename in os.listdir(templates_path):
        if (minimal and filename == ""event.json"") or filename.endswith("".pyc""):
            continue
        dest_path = os.path.join(templates_path, filename)

        if not os.path.isdir(dest_path):
            copy(dest_path, src)","def __set__(self, instance, value):
		instance.__dict__[self.field.name] = value
		setattr(instance, self.field.attname, json.dumps(value))"
9,"def init(src, minimal=False):
    """"""Copies template files to a given directory.

    :param str src:
        The path to output the template lambda project files.
    :param bool minimal:
        Minimal possible template files (excludes event.json).
    """"""

    templates_path = os.path.join(
        os.path.dirname(os.path.abspath(__file__)), ""project_templates"",
    )
    for filename in os.listdir(templates_path):
        if (minimal and filename == ""event.json"") or filename.endswith("".pyc""):
            continue
        dest_path = os.path.join(templates_path, filename)

        if not os.path.isdir(dest_path):
            copy(dest_path, src)","def __get__(self, instance, owner):
		if instance is None:
			raise AttributeError # ?"
10,"def init(src, minimal=False):
    """"""Copies template files to a given directory.

    :param str src:
        The path to output the template lambda project files.
    :param bool minimal:
        Minimal possible template files (excludes event.json).
    """"""

    templates_path = os.path.join(
        os.path.dirname(os.path.abspath(__file__)), ""project_templates"",
    )
    for filename in os.listdir(templates_path):
        if (minimal and filename == ""event.json"") or filename.endswith("".pyc""):
            continue
        dest_path = os.path.join(templates_path, filename)

        if not os.path.isdir(dest_path):
            copy(dest_path, src)","def upload(
    src,
    requirements=None,
    local_package=None,
    config_file=""config.yaml"",
    profile_name=None,"
11,"def init(src, minimal=False):
    """"""Copies template files to a given directory.

    :param str src:
        The path to output the template lambda project files.
    :param bool minimal:
        Minimal possible template files (excludes event.json).
    """"""

    templates_path = os.path.join(
        os.path.dirname(os.path.abspath(__file__)), ""project_templates"",
    )
    for filename in os.listdir(templates_path):
        if (minimal and filename == ""event.json"") or filename.endswith("".pyc""):
            continue
        dest_path = os.path.join(templates_path, filename)

        if not os.path.isdir(dest_path):
            copy(dest_path, src)","def get_callable_handler_function(src, handler):
    """"""Translate a string of the form ""module.function"" into a callable
    function.

    :param str src:
      The path to your Lambda project containing a valid handler file.
    :param str handler:
      A dot delimited string representing the `<module>.<function name>`.
    """"""

    # ""cd"" into `src` directory.
    os.chdir(src)

    module_name, function_name = handler.split(""."")
    filename = get_handler_filename(handler)

    path_to_module_file = os.path.join(src, filename)
    module = load_source(module_name, path_to_module_file)
    return getattr(module, function_name)"
12,"def invoke(
    src,
    event_file=""event.json"",
    config_file=""config.yaml"",
    profile_name=None,
    verbose=False,","def __set__(self, instance, value):
		instance.__dict__[self.field.name] = value
		setattr(instance, self.field.attname, json.dumps(value))"
13,"def invoke(
    src,
    event_file=""event.json"",
    config_file=""config.yaml"",
    profile_name=None,
    verbose=False,","def __get__(self, instance, owner):
		if instance is None:
			raise AttributeError # ?"
14,"def invoke(
    src,
    event_file=""event.json"",
    config_file=""config.yaml"",
    profile_name=None,
    verbose=False,","def upload(
    src,
    requirements=None,
    local_package=None,
    config_file=""config.yaml"",
    profile_name=None,"
15,"def invoke(
    src,
    event_file=""event.json"",
    config_file=""config.yaml"",
    profile_name=None,
    verbose=False,","def get_callable_handler_function(src, handler):
    """"""Translate a string of the form ""module.function"" into a callable
    function.

    :param str src:
      The path to your Lambda project containing a valid handler file.
    :param str handler:
      A dot delimited string representing the `<module>.<function name>`.
    """"""

    # ""cd"" into `src` directory.
    os.chdir(src)

    module_name, function_name = handler.split(""."")
    filename = get_handler_filename(handler)

    path_to_module_file = os.path.join(src, filename)
    module = load_source(module_name, path_to_module_file)
    return getattr(module, function_name)"
